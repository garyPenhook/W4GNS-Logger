═════════════════════════════════════════════════════════════════════════════════
QRP POWER TRACKING - QUICK REFERENCE
W4GNS Logger - Implementation Complete & Tested
═════════════════════════════════════════════════════════════════════════════════

CONTACT MODEL METHODS (src/database/models.py)
──────────────────────────────────────────────

contact.is_qrp_contact() -> bool
  └─ Returns: True if tx_power ≤ 5W
  └─ Example: if contact.is_qrp_contact(): print("QRP!")

contact.is_qrp_two_way(other_power: float) -> bool
  └─ Returns: True if both ≤ 5W
  └─ Example: if contact.is_qrp_two_way(4.5): print("2-way QRP!")

contact.calculate_mpw(distance_miles: float) -> float
  └─ Returns: Miles Per Watt ratio
  └─ Example: mpw = contact.calculate_mpw(1500.0)  # Result: 1500 MPW at 1W

contact.qualifies_for_mpw(distance_miles: float) -> bool
  └─ Returns: True if tx_power ≤ 5W AND MPW ≥ 1000
  └─ Example: if contact.qualifies_for_mpw(1500): print("MPW Award!")

contact.get_qrp_category() -> str
  └─ Returns: 'QRPp' | 'QRP' | 'STANDARD' | 'QRO' | 'UNKNOWN'
  └─ Thresholds: <0.5W | 0.5-5W | 5-100W | >100W
  └─ Example: category = contact.get_qrp_category()

═════════════════════════════════════════════════════════════════════════════════

REPOSITORY METHODS (src/database/repository.py)
────────────────────────────────────────────────

repo.get_qrp_contacts() -> List[Contact]
  └─ Returns: All contacts with tx_power ≤ 5W
  └─ Example: qrp_list = repo.get_qrp_contacts()

repo.count_qrp_points_by_band() -> Dict[str, Any]
  └─ Returns: {
       'band_points': {'160M': 4, '80M': 3, ...},
       'total_points': 13.5,
       'qrp_contacts_count': 6,
       'unique_bands': 5
     }
  └─ Note: One contact per band only (SKCC rule)

repo.analyze_qrp_award_progress() -> Dict[str, Any]
  └─ Returns: {
       'qrp_x1': {'points': 87, 'requirement': 300, 'qualified': False, ...},
       'qrp_x2': {'points': 45, 'requirement': 150, 'qualified': False, ...},
       'band_breakdown': {...}
     }
  └─ QRP x1: Your power ≤5W (300 pts needed)
  └─ QRP x2: Both ≤5W (150 pts needed)

repo.calculate_mpw_qualifications() -> List[Dict]
  └─ Returns: [{
       'callsign': 'W5XYZ',
       'distance_miles': 1500,
       'tx_power': 1.0,
       'mpw': 1500.0,
       'qualified': True,
       ...
     }]
  └─ Requires: distance field populated
  └─ Filter: ≤5W AND MPW ≥1000

repo.get_power_statistics() -> Dict[str, Any]
  └─ Returns: {
       'total_with_power': 42,
       'qrpp_count': 2,
       'qrp_count': 18,
       'standard_count': 20,
       'qro_count': 2,
       'average_power': 12.5,
       'min_power': 0.1,
       'max_power': 150.0,
       'categories': {...}
     }
  └─ All contacts with tx_power data

═════════════════════════════════════════════════════════════════════════════════

USAGE PATTERNS
──────────────

Pattern 1: Check single contact
──────────────────────────────
contact = repo.get_contact(123)
if contact.is_qrp_contact():
    print(f"✓ QRP at {contact.tx_power}W")

Pattern 2: Get all QRP contacts
────────────────────────────────
qrp = repo.get_qrp_contacts()
for c in qrp:
    print(f"{c.callsign}: {c.tx_power}W on {c.band}")

Pattern 3: Check award progress
────────────────────────────────
progress = repo.analyze_qrp_award_progress()
print(f"QRP x1: {progress['qrp_x1']['points']}/300")
print(f"QRP x2: {progress['qrp_x2']['points']}/150")

Pattern 4: Find MPW qualifications
───────────────────────────────────
mpw = repo.calculate_mpw_qualifications()
for q in mpw:
    print(f"{q['callsign']}: {q['mpw']:.0f} MPW ✓")

Pattern 5: Show power distribution
───────────────────────────────────
stats = repo.get_power_statistics()
print(f"QRP:   {stats['qrp_count']}")
print(f"STD:   {stats['standard_count']}")
print(f"AVG:   {stats['average_power']:.1f}W")

═════════════════════════════════════════════════════════════════════════════════

SKCC QRP RULES
──────────────

QRP Definition:    ≤ 5 watts (all modes)
QRP x1 Award:      Your ≤5W, Other station any power (need 300 points)
QRP x2 Award:      Both ≤5W (need 150 points)
QRP MPW Award:     Miles/Watts ≥1000 at ≤5W (binary qualification)

Point Distribution (QRP x1 & x2):
  160M = 4 points  │  80M/10M = 3 points  │  60M/40M/30M = 2 points
  20M/17M/15M/12M = 1 point  │  6M/2M = 0.5 points

Award Rules:
  • One contact per band maximum
  • CW mode only
  • Band limit enforced in count_qrp_points_by_band()

═════════════════════════════════════════════════════════════════════════════════

DATABASE FIELDS
───────────────

Field: tx_power (Float)
  Description: Your transmit power in watts
  Used by: All QRP methods
  Range: 0.1W - 1500W
  Example: 5.0, 0.5, 25.0

Field: rx_power (Float)
  Description: Other station's power (for 2-way QRP)
  Used by: is_qrp_two_way(), analyze_qrp_award_progress()
  Range: 0.1W - 1500W
  Example: 4.5, 0.3, 100.0

Field: distance (Float)
  Description: Distance to contacted station in miles
  Used by: calculate_mpw(), calculate_mpw_qualifications()
  Range: 1 - 10000 miles
  Example: 500.0, 1200.5, 2750.0

═════════════════════════════════════════════════════════════════════════════════

IMPLEMENTATION STATUS
─────────────────────

✅ Contact Model Methods (5 methods)
   ├─ is_qrp_contact()
   ├─ is_qrp_two_way()
   ├─ calculate_mpw()
   ├─ qualifies_for_mpw()
   └─ get_qrp_category()

✅ Repository Methods (5 methods)
   ├─ get_qrp_contacts()
   ├─ count_qrp_points_by_band()
   ├─ analyze_qrp_award_progress()
   ├─ calculate_mpw_qualifications()
   └─ get_power_statistics()

✅ Test Suite (3 test classes, 30+ assertions)
   ├─ Model method tests
   ├─ Repository method tests
   └─ MPW calculation tests

✅ Documentation
   ├─ Implementation guide
   ├─ Usage examples
   └─ GUI integration points

═════════════════════════════════════════════════════════════════════════════════

TESTING
───────

Run all tests:
  $ source venv/bin/activate
  $ python3 test_qrp_implementation.py

Expected: ✅ ALL TESTS PASSED!

Test coverage:
  • Contact model QRP methods: ✓
  • Repository QRP queries: ✓
  • Award progress calculation: ✓
  • MPW qualification: ✓
  • Power statistics: ✓
  • Boundary conditions: ✓

═════════════════════════════════════════════════════════════════════════════════

NEXT STEPS (GUI IMPLEMENTATION)
───────────────────────────────

1. Add TX Power field to contact entry form
   └─ Input box for decimal values (0.5, 5.0, 12.5, etc.)

2. Add RX Power field (optional)
   └─ For 2-way QRP confirmation

3. Add QRP Status indicator
   └─ Call contact.is_qrp_contact()

4. Add Award Progress dashboard
   └─ Call repo.analyze_qrp_award_progress()
   └─ Display progress bars for x1, x2

5. Add MPW Award display
   └─ Call repo.calculate_mpw_qualifications()
   └─ Show qualifying contacts

6. Add Power statistics panel
   └─ Call repo.get_power_statistics()
   └─ Show distribution chart

═════════════════════════════════════════════════════════════════════════════════

REFERENCES
──────────

Documentation:
  • docs/QRP_POWER_TRACKING.md - Specification
  • docs/QRP_IMPLEMENTATION_GUIDE.md - Implementation details
  • src/database/models.py - Contact model (lines 147-214)
  • src/database/repository.py - Repository methods (lines 593-850)

Test File:
  • test_qrp_implementation.py - Comprehensive test suite

═════════════════════════════════════════════════════════════════════════════════

Last Updated: October 21, 2025
Status: Implementation Complete & Tested
Ready for: GUI Integration

═════════════════════════════════════════════════════════════════════════════════
